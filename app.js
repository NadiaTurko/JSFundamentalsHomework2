// 2. OPERATORS. TYPE CONVERSIONS. ARRAYS. CONDITIONAL STATEMENT
// üìÄüíø

// 1.
// –î–∞–Ω–æ —Ç—Ä–∏ —Ü—ñ–ª–∏—Ö —á–∏—Å–ª–∞: a, b, c. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ—Å—Ç–∏–Ω–Ω—ñ—Å—Ç—å –≤–∏—Å–ª–æ–≤–ª—é–≤–∞–Ω–Ω—è:
//  a < b < c
// const a = 5;
// const b = 15;
// const c = 65;

// console.log(a < b < c);//true
// 2.
// –Ñ —Ç–∞–∫–∏–π –∫–æ–¥:

// let x = 1;
// let y = 2;

// let res1 = // –î–æ–ø–∏—à—ñ—Ç—å –∫–æ–¥, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ x —ñ y
// console.log(res1); // ""12""
// console.log(typeof res1); // ""string""
// let res1 = String(x)+String(y);// –î–æ–ø–∏—à—ñ—Ç—å –∫–æ–¥, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ x —ñ y
// console.log(res1); // ""12""
// console.log(typeof res1); // ""string""

// let res2 = String("x" < "y"); // –î–æ–ø–∏—à—ñ—Ç—å –∫–æ–¥, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ x —ñ y
// console.log(res2); // ""true""
// console.log(typeof res2); // ""string""

// let res3 = x < y; // –î–æ–ø–∏—à—ñ—Ç—å –∫–æ–¥, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ x —ñ y
// console.log(res3); // true
// console.log(typeof res3); // ""boolean""

// let res4 = `y` - `x`; // –î–æ–ø–∏—à—ñ—Ç—å –∫–æ–¥, –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –∑–º—ñ–Ω–Ω—ñ x —ñ y
// console.log(res4); // NaN
// console.log(typeof res4); // ""number""

// –î–æ–ø–∏—à—ñ—Ç—å –∫–æ–¥, —â–æ–± –≤ –∫–æ–Ω—Å–æ–ª—ñ –±—Ä–∞—É–∑–µ—Ä–∞ –∑'—è–≤–∏–ª–∏—Å—è —Ä—è–¥–∫–∏, —è–∫—ñ –Ω–∞–ø–∏—Å–∞–Ω—ñ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö, –æ–ø–µ—Ä—É—é—á–∏ –ø—Ä–∏ —Ü—å–æ–º—É –∑–º—ñ–Ω–Ω–∏–º–∏ —Ö —ñ —É.

// 3.
// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—é prompt() –∑–∞–¥–∞–π—Ç–µ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ –¥–æ—Å—è–≥–Ω–µ–Ω–Ω—è –Ω–∏–º –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—å–æ–≥–æ –≤—ñ–∫—É.
// –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—à—ñ—Ç—å –≤ –∑–º—ñ–Ω–Ω—É isAdult. –í –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Å—Ç–∞—Ç—É—Å –æ—Å–æ–±–∏.
//  –ù–∞–ø—Ä–∏–∫–ª–∞–¥: –ø—Ä–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—ñ —É–º–æ–≤–∏ –≤—ñ–∫ –±—ñ–ª—å—à–µ 18 –≤–∏–≤–µ—Å—Ç–∏ ‚Äú–í–∏ –¥–æ—Å—è–≥–ª–∏ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—å–æ–≥–æ –≤—ñ–∫—É‚Äù. –Ø–∫—â–æ –≤—ñ–∫ –º–µ–Ω—à–µ 18 —Ä–æ–∫—ñ–≤ –≤–∏–≤–µ—Å—Ç–∏
//  ‚Äú–í–∏ —â–µ –Ω–∞–¥—Ç–æ –º–æ–ª–æ–¥—ñ‚Äù,

// let isAdult = prompt('–ß–∏ –¥–æ—Å—è–≥–ª–∏ –í–∏ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—å–æ–≥–æ –≤—ñ–∫?');
// const getAge = (isAdult >= 18) ? '–í–∏ –¥–æ—Å—è–≥–ª–∏ –ø–æ–≤–Ω–æ–ª—ñ—Ç–Ω—å–æ–≥–æ –≤—ñ–∫—É': '–í–∏ —â–µ –Ω–∞–¥—Ç–æ –º–æ–ª–æ–¥—ñ';
// console.log(getAge);

// 4.
// –ó–∞–¥–∞–Ω–æ –º–∞—Å–∏–≤ —á–∏—Å–µ–ª, –∑–Ω–∞–π—Ç–∏ —á–∏—Å–ª–æ —è–∫–µ –Ω–∞–π–±—ñ–ª—å—à —á–∞—Å—Ç–æ –≤—Ö–æ–¥–∏—Ç—å –≤ –º–∞—Å–∏–≤, –∑–∞–Ω–µ—Å—Ç–∏ —Ü–µ —á–∏—Å–ª–æ –≤ –Ω–æ–≤–∏–π –º–∞—Å–∏–≤
//—ñ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –≤—Ö–æ–¥–∂–µ–Ω–Ω—è —Ü—å–æ–≥–æ —á–∏—Å–ª–∞ —ñ–∑ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º–∞—Å–∏–≤—É.
// let arr1 = [4, 5, 2, 1, 6, 5, 3, 5, 2, 5];
// let mf = 1;
// let m = 0;
// let data;
// for (let i = 0; i < arr1.length; i++) {
//   for (let j = i; j < arr1.length; j++) {
//     if (arr1[i] == arr1[j]) m++;
//     if (mf < m) {
//       mf = m;
//       data = arr1[i];
//     }
//   }
//   m = 0;
// }
// arr1 = arr1.filter(function (value) {  return value != data;});
// console.log(data);
// console.log(arr1); // [4, 2, 1, 6, 3, 2]

// 5.
// –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å —Ç—Ä–∏ –¥–æ–≤–∂–∏–Ω–∏ —Å—Ç–æ—Ä—ñ–Ω —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ prompt () —Ç—Ä–∏ —Ä–∞–∑–∏ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ–∂–Ω–æ—ó —Å—Ç–æ—Ä–æ–Ω–∏).
// –ù–µ–æ–±—Ö—ñ–¥–Ω–æ
//     a) –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —ñ –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–ª–æ—â—É —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞
//     b) –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ —Ü–µ–π —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫ —î –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–º —ñ –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.
// –ó–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É —á–∏ –≤–≤–µ–¥–µ–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º –∑–Ω–∞—á–µ–Ω–Ω—è –∫–æ—Ä–µ–∫—Ç–Ω—ñ, –≤ —ñ–Ω—à–æ–º—É –≤–∏–ø–∞–¥–∫—É –≤–∏–≤–µ—Å—Ç–∏ 'Incorrect data‚Äò. –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫–∞ –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –∑ —Ç–æ—á–Ω—ñ—Å—Ç—é 3 –∑–Ω–∞–∫–∏ –ø—ñ—Å–ª—è –∫–æ–º–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥:  8.42355465 =>  8.424).
// const a = Number(prompt("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–æ—Ä–æ–Ω—É a –≤ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫—É"));
// const b = Number(prompt("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–æ—Ä–æ–Ω—É b –≤ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫—É"));
// const c = Number(prompt("–í–≤–µ–¥—ñ—Ç—å —Å—Ç–æ—Ä–æ–Ω—É c –≤ —Ç—Ä–∏–∫—É—Ç–Ω–∏–∫—É"));
// const halfP = (a + b + c) / 2;
// const formulaHerona = Math.sqrt(
//   halfP * (halfP - a) * (halfP - b) * (halfP - c)
// ).toFixed(3);
// const areaTriangle = a > 0 && b > 0 && c > 0 ? formulaHerona : `Incorrect data`;
// console.log(areaTriangle);
// 6.
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é calc(a, b, op), —è–∫–∞ –≤–∏–∫–æ–Ω—É—î –Ω–∞–¥ —á–∏—Å–ª–∞–º–∏ a —ñ b –æ–¥–Ω—É —ñ–∑ –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —ó—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
// –í–∏–¥ –æ–ø–µ—Ä–∞—Ü—ñ—ó –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è —Ü—ñ–ª–∏–º —á–∏—Å–ª–æ–º op: 1 ‚Äì –≤—ñ–¥–Ω—ñ–º–∞–Ω–Ω—è, 2 ‚Äì –¥–æ–±—É—Ç–æ–∫, 3 ‚Äì –¥—ñ–ª–µ–Ω–Ω—è, —ñ–Ω—à—ñ –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äì –¥–æ–¥–∞–≤–∞–Ω–Ω—è.
// let result;
// const number1 = Number(prompt("Enter first number: "));
// const operator = prompt("Enter operator ( either +, -, * or /");
// const number2 = Number(prompt("Enter second number: "));

// switch (operator) {
//   case "+":
//     result = number1 + number2;
//     alert(`${number1} + ${number2} = ${result}`);
//     break;

//   case "-":
//     result = number1 - number2;
//     alert(`${number1} - ${number2} = ${result}`);
//     break;

//   case "*":
//     result = number1 * number2;
//     alert(`${number1} * ${number2} = ${result}`);
//     break;

//   case "/":
//     result = number1 / number2;
//     alert(`${number1} / ${number2} = ${result}`);
//     break;

//   default:
//     console.log("Invalid operator");
//     break;
// }
// 7.
// –ù–∞–ø–∏—à—ñ—Ç—å —Ñ—É–Ω–∫—Ü—ñ—é findUnique(arr), —è–∫–∞ –ø—Ä–∏–π–º–∞—î –º–∞—Å–∏–≤ arr —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å –π–æ–≥–æ –µ–ª–µ–º–µ–Ω—Ç–∏.
//  –Ø–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —É–Ω—ñ–∫–∞–ª—å–Ω—ñ (–Ω–µ –º–∞—é—Ç—å –¥—É–±–ª—ñ–≤), —Ç–æ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä–Ω–µ true, —ñ–Ω–∞–∫—à–µ - false.
// findUnique([1, 2, 3, 5, 3]);  // => false
// findUnique([1, 2, 3, 5, 11]); // => true

// const arr1 = [1, 2, 3, 5, 3];
// const arr2 = [1, 2, 3, 5, 11];
// const findUnique = function (arr) {
//   const arrUnique = [...new Set(arr)];
//   return arrUnique.length === arr.length ? true : false;
// };

// console.log(findUnique(arr1));
// console.log(findUnique(arr2));
